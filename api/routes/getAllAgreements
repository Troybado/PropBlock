var express = require("express");
require("dotenv").config();
var Moralis = require("../modules/moralis");
var config = require("../config");
var helper = require("../functions/Helper");

var router = express.Router();

//getting purchases requests for a seller
router.get("/getAllAgreements", async function (req, res, next) {
  const sessionToken = req.query.sessionToken;
  var ownerAddress = req.query.ownerAddress;
  var mode = req.query.mode;

  if (mode == undefined) {
    res.status(422).send("wrong input");
    return;
  }
  mode = mode.toLowerCase();

  if (
    ownerAddress === undefined ||
    (mode != "seller" && mode != "buyer" && mode != "goverment")
  ) {
    res.status(422).send("wrong input");
    return;
  }

  var isLoggedIn = await helper.isAuthenticated(sessionToken, ownerAddress);
  if (!isLoggedIn) {
    res.send(401, "not authenticated");
    return;
  }

  ownerAddress = helper.toCheckSumAddress(ownerAddress);

  const query = new Moralis.Query("AgreementDrafts");
  let pipeline;
  if (mode != "goverment") {
    pipeline = [
      {
        match: {
          ...(mode == "seller" && {
            landlordAddress: ownerAddress,
          }),
          ...(mode == "buyer" && {
            buyerAddress: ownerAddress,
          }),
        },
      },
      {
        lookup: {
          from: "AgreementStatus",
          localField: "transaction_hash",
          foreignField: "txHash",
          as: "details",
        },
      },
      {
        unwind: {
          path: "$details"
        }
      },
      {
        match: {
          "details.propertyObjectId": { $exists: true },
        },
      },
      {
        project: {
          buyerAddress: 1,
          landlordAddress: 1,
          createdAt: 1,
          "details.propertyObjectId": 1,
          "details.areDocsUploaded": 1,
          "details.isBeingVerified": 1,
          "details.needsRevision": 1,
          "details.isGovernmentVerified": 1,
          "details.isBuyerCancelled": 1,
          "details.isOwnerCancelled": 1,
          "details.buyerPaymentComplete": 1,
          "details.buyerPaymentComplete": 1,
        },
      },
    ];
  } else {
    pipeline = [
      {
        lookup: {
          from: "AgreementStatus",
          localField: "transaction_hash",
          foreignField: "txHash",
          as: "details",
        },
      },
      {
        unwind: {
          path: "$details"
        }
      },
      {
        match: {
          "details.propertyObjectId": { $exists: true },
        },
      },
      {
        addFields: {
          smallLandlordAddress: { $toLower: "$landlordAddress" },
          smallBuyerAddress: { $toLower: "$buyerAddress" },
        },
      },
      {
        lookup: {
          from: "_User",
          localField: "smallLandlordAddress",
          foreignField: "ethAddress",
          as: "landlord",
        },
      },
      {
        unwind: {
          path: "$landlord",
        },
      },
      {
        lookup: {
          from: "_User",
          localField: "smallBuyerAddress",
          foreignField: "ethAddress",
          as: "buyer",
        },
      },
      {
        unwind: {
          path: "$buyer",
        },
      },
      {
        project: {
          buyerAddress: 1,
          landlordAddress: 1,
          createdAt: 1,
          "details.propertyObjectId": 1,
          "details.areDocsUploaded": 1,
          "details.isBeingVerified": 1,
          "details.needsRevision": 1,
          "details.isGovernmentVerified": 1,
          "details.isBuyerCancelled": 1,
          "details.isOwnerCancelled": 1,
          "details.buyerPaymentComplete": 1,
          "details.buyerPaymentComplete": 1,
          "landlord.email": 1,
          "landlord.fullName": 1,
          "buyer.email": 1,
          "buyer.fullName": 1,
        },
      },
    ];
  }

  const _result = await query.aggregate(pipeline, { useMasterKey: true });
  const result = JSON.parse(JSON.stringify(_result));
  for (var i = 0; i < result.length; i++) {
    result[i].details = result[i].details[0];
  }

  res.json(result);
  return;
});

module.exports = router;
