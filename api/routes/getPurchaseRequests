var express = require("express");
require("dotenv").config();
var Moralis = require("../modules/moralis");
var config = require("../config");
var helper = require("../functions/Helper");

var router = express.Router();

//getting purchases requests for a seller
router.get("/getPurchaseRequests", async function (req, res, next) {
  const sessionToken = req.query.sessionToken;
  const ownerAddress = req.query.ownerAddress.toLowerCase();
  const mode = req.query.mode.toLowerCase();
  var isLoggedIn = await helper.isAuthenticated(sessionToken, ownerAddress)
  if (!isLoggedIn) {
    res.status(401);
    res.send("not authenticated")
    return;
  }

  if (mode === undefined
     || ownerAddress === undefined
     || ((mode != "seller" && mode != "buyer"))) {
    res.send(400, "wrong input")
    return
  }

  const requestsQuery = new Moralis.Query("PurchaseRequest");
  if(mode == "seller") requestsQuery.equalTo("sellerEthAddress", ownerAddress);
  else requestsQuery.equalTo("requesterEthAddress", ownerAddress);
    // requestsQuery.equalTo("isPending", true)
    const requestResult = await requestsQuery.find();

    //because moralis object is very bad
    //so ill just treat it as a JSON
    const result = JSON.parse(JSON.stringify(requestResult))

    const data = [];
    for (let i = 0; i < result.length; i++) {
      var currentResult = result[i];
      //only return results with isBeingProcessed status

      var user = {};
      var requestorAddress = currentResult.requesterEthAddress;
      //make local caching
      var user = {};

      for (var j = 0; j < data.length; j++) {
        //if user exists in cache
        if (data[j]["address"] == requestorAddress.toLowerCase()) {
          user = {
            fullName: data[j]["fullName"],
            address: data[j]["address"]
          }
          break;
        }
      }

      if (Object.keys(user).length === 0) user = await helper.getUser(requestorAddress)
      
      data.push({
        key: currentResult.objectId,
        address: user.address,
        propertyID: currentResult.propertyObjectId,
        dateRequested: currentResult.createdAt,
        isPending: currentResult.isPending ?? true,
        isAccepted: currentResult.isAccepted ?? false
      });
    }
    res.send(data); 
});

module.exports = router;
